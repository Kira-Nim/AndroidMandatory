
package com.example.android_mandatory.ui;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.TextView;
import androidx.recyclerview.widget.RecyclerView;

// Import autogenerated class R (This is a class generated by Gradle that holds all id's for all xml files in this project)
import com.example.android_mandatory.Model.Symptom;
import com.example.android_mandatory.R;

import java.util.ArrayList;
import java.util.List;


public class SymptomAdapter extends RecyclerView.Adapter<SymptomAdapter.ViewHolder>  {

    private List<Symptom> localDataSet;
    private SymptomsFragment.ItemClickListener itemClickListener;


    public static class ViewHolder extends RecyclerView.ViewHolder {

        private final TextView textView;

        // Constructor takes view
        public ViewHolder(View view) {
            super(view);

            textView = (TextView) view.findViewById(R.id.symptomRowTextView);
        }

        // Normal getter
        public TextView getTextView() {
            return textView;
        }
    }

    // Constructor for our (outer) class that takes the model data to be shown as param.
    public SymptomAdapter(List<Symptom> dataSet, SymptomsFragment.ItemClickListener itemClickListener) {

        // Data from db to be shown in table
        localDataSet = dataSet;

        /*
            This itemClickListener att contains the param which is an instance of an anonymously implemented interface.
            It contains logic about what should happen when item in table is clicked and
            encapsulated data to handle this event.
         */
        this.itemClickListener = itemClickListener;

    }

    // Create new ViewHolders incl. views (as many as can be shown on screen) - invoked by the layout manager
    // The viewGroup param is in this case an instance of our RecyclerView for the SymptomFragment.
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {

        // Create a new view, which defines the UI of the list item
        // We could possibly have used a binding insted of this way here (look in MainActivity)...
        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.symptom_row_item, viewGroup, false);

        ViewHolder newViewHolder = new ViewHolder(view);

        // Register functionality for an oncklicevent on an item in symptom list in ui.
        view.setOnClickListener(viewPassedByOnClickListener -> itemClickListener.onItemClick(viewPassedByOnClickListener, newViewHolder.getAdapterPosition()));

        return newViewHolder;
    }

    // Replace the contents of a view (in a viewHolder) - invoked by the layout manager
    // called everytime a viewHolder is reused and there for needs new data
    @Override
    public void onBindViewHolder(ViewHolder viewHolder, final int position) {

        // Get element from your dataset at this position and replace the
        // contents of the view with that element
        viewHolder.getTextView().setText(localDataSet.get(position).getName());
    }

    // Return the size of your dataset (how many items in table)  - invoked by the layout manager
    @Override
    public int getItemCount() {
        return localDataSet.size();
    }

    public void setItems(List<Symptom> newList) {
        this.localDataSet = newList;
    }


}
